generator client {
  provider = "prisma-client-js"
}

generator seed {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This is used to configure the seed script
model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role       @default(DONOR)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  donations     Donation[]
  sessions      Session[]
  projects      Project[]  @relation("ProjectManager")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id             String          @id @default(cuid())
  title          String
  description    String
  goal           Float
  currentFunding Float           @default(0)
  startDate      DateTime
  endDate        DateTime?
  status         ProjectStatus   @default(ACTIVE)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  donations      Donation[]
  updates        ProjectUpdate[]
  managers       User[]          @relation("ProjectManager")
}

model Donation {
  id               String        @id @default(cuid())
  amount           Float
  message          String?
  anonymous        Boolean       @default(false)
  status           DonationStatus @default(PENDING)
  stripeSessionId  String?       @unique
  createdAt        DateTime      @default(now())
  userId           String?
  projectId        String
  donorEmail       String
  donorName        String
  project          Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user             User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProjectUpdate {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  MANAGER
  DONOR
  GUEST
}

enum ProjectStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

enum DonationStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
